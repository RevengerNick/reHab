"use client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { gql, useMutation } from "@apollo/client";
import { ChannelFormDialog } from "./channel-form-dialog";
import { toast } from "sonner";
import { Button } from "../ui/button";
import { ChannelType } from "@/types";

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ isEnabled
const UPDATE_CHANNEL_STATUS_MUTATION = gql`
  mutation UpdateChannelStatus($updateChannelDto: UpdateChannelDto!) {
    updateChannel(updateChannelDto: $updateChannelDto) {
      id
      isEnabled
    }
  }
`;

interface ChannelDetails {
  name: string;
  icon: string;
}

const CHANNEL_DETAILS: Record<ChannelType, ChannelDetails> = {
  [ChannelType.EMAIL]: { name: "Email", icon: "‚úâÔ∏è" },
  [ChannelType.SMS]: { name: "SMS", icon: "üì±" },
  [ChannelType.TELEGRAM]: { name: "Telegram", icon: "üì±" }
};

export function ChannelCard({ channel, onChannelUpdated }: { 
  channel: { type: ChannelType; isEnabled: boolean; id: string; project: { publicId: string } }; 
  onChannelUpdated: () => void 
}) {
  const channelDetails = CHANNEL_DETAILS[channel.type] || { name: channel.type, icon: "‚öôÔ∏è" };

  const [updateStatus, { loading }] = useMutation(UPDATE_CHANNEL_STATUS_MUTATION, {
    onCompleted: (data) => {
      toast.success(`–ö–∞–Ω–∞–ª ${channelDetails.name} ${data.updateChannel.isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
      onChannelUpdated(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    },
    onError: (error) => toast.error("–û—à–∏–±–∫–∞!", { description: error.message }),
  });

  const handleStatusChange = (isEnabled: boolean) => {
    // –î–ª—è –º—É—Ç–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω ID –∫–∞–Ω–∞–ª–∞ –∏ ID –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è Guard'–∞)
    // –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ channel.project.publicId –¥–æ—Å—Ç—É–ø–µ–Ω. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å
    updateStatus({
      variables: {
        updateChannelDto: { 
          id: channel.id,
          isEnabled: isEnabled,
        }
      }
    });
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-xl font-medium flex items-center gap-2">
          <span className="text-2xl">{channelDetails.icon}</span>
          {channelDetails.name}
        </CardTitle>
        <Switch
          checked={channel.isEnabled}
          onCheckedChange={handleStatusChange}
          disabled={loading}
        />
      </CardHeader>
      <CardContent>
        <p className="text-xs text-slate-500">
          {channel.isEnabled ? "–ö–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ." : "–ö–∞–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω."}
        </p>
        <div className="mt-4">
          {/* –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <ChannelFormDialog
            isEditing={true}
            publicId={channel.project.publicId} // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
            channelToEdit={channel}
            onCompleted={onChannelUpdated}
          >
            <Button variant="outline">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
          </ChannelFormDialog>
        </div>
      </CardContent>
    </Card>
  );
}